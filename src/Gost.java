import java.util.Scanner;
import java.util.Random;

public class Gost extends Monster {
    private String image = "\uD83D\uDC7B";
    private Random r = new Random();

    Gost(int sizeBoard) {
        super(sizeBoard);
    }

    @Override
    public String getImage() {
        return image;
    }

    @Override
    public void setImage(String image) {
        this.image = image;
    }

    // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –ø—Ä–∏–∑—Ä–∞–∫–∞
    @Override
    public boolean taskMonster(int difficultGame) {
        System.out.println("üëª –ü—Ä–∏–∑—Ä–∞–∫ –±—Ä–æ—Å–∞–µ—Ç –≤–∞–º –≤—ã–∑–æ–≤!");

        if (difficultGame == 1) {
            return easyTask();
        } else if (difficultGame == 2) {
            return mediumTask();
        } else if (difficultGame == 3) {
            return hardTask();
        } else if (difficultGame == 4) {
            return veryHardTask();
        } else {
            return extremeTask();
        }
    }

    // –õ–µ–≥–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã (—Å–ª–æ–∂–µ–Ω–∏–µ/–≤—ã—á–∏—Ç–∞–Ω–∏–µ)
    private boolean easyTask() {
        int a = r.nextInt(20) + 1;
        int b = r.nextInt(20) + 1;
        int operation = r.nextInt(2); // 0 - —Å–ª–æ–∂–µ–Ω–∏–µ, 1 - –≤—ã—á–∏—Ç–∞–Ω–∏–µ

        if (operation == 0) {
            int trueAnswer = a + b;
            System.out.println("–†–µ—à–∏ –ø—Ä–∏–º–µ—Ä: " + a + " + " + b + " = ?");
            return checkAnswer(trueAnswer);
        } else {
            // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π
            int max = Math.max(a, b);
            int min = Math.min(a, b);
            int trueAnswer = max - min;
            System.out.println("–†–µ—à–∏ –ø—Ä–∏–º–µ—Ä: " + max + " - " + min + " = ?");
            return checkAnswer(trueAnswer);
        }
    }

    // –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–∏–º–µ—Ä—ã (—É–º–Ω–æ–∂–µ–Ω–∏–µ)
    private boolean mediumTask() {
        int a = r.nextInt(10) + 1;
        int b = r.nextInt(10) + 1;
        int trueAnswer = a * b;

        System.out.println("–†–µ—à–∏ –ø—Ä–∏–º–µ—Ä: " + a + " √ó " + b + " = ?");
        return checkAnswer(trueAnswer);
    }

    // –°–ª–æ–∂–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã (–¥–µ–ª–µ–Ω–∏–µ)
    private boolean hardTask() {
        int result = r.nextInt(10) + 1;
        int b = r.nextInt(8) + 2; // –æ—Ç 2 –¥–æ 9
        int a = result * b; // —á—Ç–æ–±—ã –¥–µ–ª–µ–Ω–∏–µ –±—ã–ª–æ –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–∞

        System.out.println("–†–µ—à–∏ –ø—Ä–∏–º–µ—Ä: " + a + " √∑ " + b + " = ?");
        return checkAnswer(result);
    }

    // –û—á–µ–Ω—å —Å–ª–æ–∂–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã (–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
    private boolean veryHardTask() {
        int a = r.nextInt(15) + 1;
        int b = r.nextInt(15) + 1;
        int c = r.nextInt(10) + 1;
        int trueAnswer = (a + b) * c;

        System.out.println("–†–µ—à–∏ –ø—Ä–∏–º–µ—Ä: (" + a + " + " + b + ") √ó " + c + " = ?");
        return checkAnswer(trueAnswer);
    }

    // –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã (—Å –ø–æ—Ä—è–¥–∫–æ–º –æ–ø–µ—Ä–∞—Ü–∏–π)
    private boolean extremeTask() {
        int a = r.nextInt(20) + 1;
        int b = r.nextInt(10) + 1;
        int c = r.nextInt(15) + 1;
        int trueAnswer = a + b * c; // —Å–Ω–∞—á–∞–ª–∞ —É–º–Ω–æ–∂–µ–Ω–∏–µ, –ø–æ—Ç–æ–º —Å–ª–æ–∂–µ–Ω–∏–µ

        System.out.println("–†–µ—à–∏ –ø—Ä–∏–º–µ—Ä: " + a + " + " + b + " √ó " + c + " = ?");
        System.out.println("–í–Ω–∏–º–∞–Ω–∏–µ! –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —É–º–Ω–æ–∂–µ–Ω–∏–µ!");
        return checkAnswer(trueAnswer);
    }

    private boolean checkAnswer(int trueAnswer) {
        Scanner sc = new Scanner(System.in);
        System.out.print("–í–∞—à –æ—Ç–≤–µ—Ç: ");
        int ans = sc.nextInt();

        if (trueAnswer == ans) {
            System.out.println("‚úÖ –í–µ—Ä–Ω–æ! –¢—ã –ø–æ–±–µ–¥–∏–ª –ø—Ä–∏–∑—Ä–∞–∫–∞!");
            return true;
        } else {
            System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: " + trueAnswer);
            System.out.println("–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª —ç—Ç—É –±–∏—Ç–≤—É –ø—Ä–∏–∑—Ä–∞–∫—É!");
            return false;
        }
    }
}