import java.util.Scanner;
import java.util.Random;

/**
 * –ö–ª–∞—Å—Å –±–æ–ª—å—à–æ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞ - –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç –æ–±—ã—á–Ω–æ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞
 * –ò–º–µ–µ—Ç –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
 */
public class BigMonster extends Monster {
    // üé≠ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–æ–ª—å—à–æ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞
    private String image = "\uD83D\uDC79"; // üëπ –Ø–ø–æ–Ω—Å–∫–∏–π –æ–≥—Ä

    // üìä –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    private static final int BASE_MULTIPLIER = 10;
    private static final int BASE_SUBTRACT = 100;

    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–æ–ª—å—à–æ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞
     * @param sizeBoard —Ä–∞–∑–º–µ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
     */
    public BigMonster(int sizeBoard) {
        super(sizeBoard);
    }

    @Override
    public String getImage() {
        return image;
    }

    @Override
    public void setImage(String image) {
        this.image = image;
    }

    /**
     * –£—Å–ª–æ–∂–Ω–µ–Ω–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞
     * @param difficultGame —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (1-5)
     * @return true –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ —Ä–µ—à–∏–ª –∑–∞–¥–∞—á—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ
     */
    @Override
    public boolean taskMonster(int difficultGame) {
        System.out.println("üî• –ë–æ–ª—å—à–æ–π –º–æ–Ω—Å—Ç—Ä –±—Ä–æ—Å–∞–µ—Ç –≤—ã–∑–æ–≤!");

        if (difficultGame == 1) {
            return easyTask();
        } else {
            return complexTask(difficultGame);
        }
    }

    /**
     * –ü—Ä–æ—Å—Ç–∞—è –∑–∞–¥–∞—á–∞ (–¥–ª—è –Ω–∏–∑–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏)
     * @return —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
     */
    private boolean easyTask() {
        return super.taskMonster(1); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –∑–∞–¥–∞—á—É
    }

    /**
     * –°–ª–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∞ —Å —É–º–Ω–æ–∂–µ–Ω–∏–µ–º –∏ –≤—ã—á–∏—Ç–∞–Ω–∏–µ–º
     * @param difficultGame —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
     * @return —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
     */
    private boolean complexTask(int difficultGame) {
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–∏—Å–µ–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        int minRange = BASE_MULTIPLIER * (difficultGame - 1);
        int maxRange = BASE_MULTIPLIER * difficultGame;

        int x = r.nextInt(minRange, maxRange);
        int y = r.nextInt(minRange, maxRange);
        int z = r.nextInt(BASE_SUBTRACT * (difficultGame - 1), BASE_SUBTRACT * difficultGame);

        int trueAnswer = x * y - z;

        System.out.println("üßÆ –†–µ—à–∏ –ø—Ä–∏–º–µ—Ä: " + x + " √ó " + y + " - " + z + " = ?");
        System.out.println("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –°–Ω–∞—á–∞–ª–∞ —É–º–Ω–æ–∂–µ–Ω–∏–µ, –ø–æ—Ç–æ–º –≤—ã—á–∏—Ç–∞–Ω–∏–µ!");

        Scanner sc = new Scanner(System.in);
        System.out.print("‚û°Ô∏è  –í–∞—à –æ—Ç–≤–µ—Ç: ");
        int ans = sc.nextInt();

        return checkAnswer(trueAnswer, ans);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
     * @param trueAnswer –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
     * @param userAnswer –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return true –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –≤–µ—Ä–Ω—ã–π
     */
    private boolean checkAnswer(int trueAnswer, int userAnswer) {
        if (trueAnswer == userAnswer) {
            System.out.println("‚úÖ –ü–æ—Ç—Ä—è—Å–∞—é—â–µ! –¢—ã –ø–æ–±–µ–¥–∏–ª –±–æ–ª—å—à–æ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞!");
            return true;
        } else {
            System.out.println("‚ùå –ú–æ—â—å –±–æ–ª—å—à–æ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞ –æ–∫–∞–∑–∞–ª–∞—Å—å —Å–∏–ª—å–Ω–µ–µ!");
            System.out.println("üìù –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: " + trueAnswer);
            System.out.println("üí° –¢–≤–æ–π –æ—Ç–≤–µ—Ç: " + userAnswer);
            return false;
        }
    }

    /**
     * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π –∑–∞–¥–∞—á–∏
     * @return —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ—à–µ–Ω–∏—è
     */
    public boolean taskMonster() {
        System.out.println("üëπ –ë–æ–ª—å—à–æ–π –º–æ–Ω—Å—Ç—Ä —Ä–µ—à–∞–µ—Ç –¥–∞—Ç—å —Ç–µ–±–µ —à–∞–Ω—Å...");
        return super.taskMonster(1);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ–ª—å—à–æ–º –º–æ–Ω—Å—Ç—Ä–µ
     * @return —Å—Ç—Ä–æ–∫–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
     */
    @Override
    public String toString() {
        return "–ë–æ–ª—å—à–æ–π –º–æ–Ω—Å—Ç—Ä " + image + " –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ (" + getX() + ", " + getY() + ")";
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —É–≥—Ä–æ–∑—ã –º–æ–Ω—Å—Ç—Ä–∞
     * @return —Å—Ç—Ä–æ–∫–∞ —Å —É—Ä–æ–≤–Ω–µ–º —É–≥—Ä–æ–∑—ã
     */
    public String getThreatLevel() {
        return "–í–´–°–û–ö–ò–ô";
    }
}